import java.security.MessageDigest

apply plugin: 'com.android.application'

android {
    //  compileSdkVersion 29
    compileSdkVersion rootProject.ext.versionCompiler
    defaultConfig {
//        applicationId "com.jiangdg.usbcamera"
//        // minSdkVersion 23
//       // targetSdkVersion 29
//       // versionCode 1
//       // versionName "1.0"
//        minSdkVersion rootProject.ext.minSdkVersion
//        targetSdkVersion rootProject.ext.versionTarget
//        versionCode rootProject.ext.versionCode
//        versionName rootProject.ext.versionNameString
//        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        applicationId "com.jiangdg.usbcamera"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.versionTarget
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionNameString
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                cppFlags "-std=c++11 -frtti -fexceptions -Wno-format"
                arguments '-DANDROID_PLATFORM=android-23', '-DANDROID_STL=c++_shared' ,"-DANDROID_ARM_NEON=TRUE"
            }
        }
        ndk {
            // abiFilters "arm64-v8a", "armeabi-v7a"
            abiFilters   "arm64-v8a", "armeabi-v7a"
            ldLibs "jnigraphics"
        }
        packagingOptions {
            //    exclude 'lib/armeabi-v7a/libuvc.so'
            pickFirst 'lib/armeabi-v7a/libUVCCamera.so'
            pickFirst 'lib/armeabi-v7a/libuvc.so'
            pickFirst 'lib/armeabi-v7a/libusb100.so'
            pickFirst 'lib/armeabi-v7a/libjpeg-turbo1500.so'
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility rootProject.ext.javaSourceCompatibility
        targetCompatibility rootProject.ext.javaTargetCompatibility
    }
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.10.2"
        }
    }

}

dependencies {
//    implementation fileTree(include: ['*.jar'], dir: 'libs')
//   // implementation 'androidx.appcompat:appcompat:1.1.0'
//    implementation "androidx.appcompat:appcompat:${androidXVersion}"
//    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
//    implementation 'com.google.android.material:material:1.1.0'
//    implementation 'androidx.navigation:navigation-fragment:2.2.2'
//    implementation 'androidx.navigation:navigation-ui:2.2.2'
//    testImplementation 'junit:junit:4.12'
//    implementation 'com.github.Liuguihong:AndroidUVCCamera:1.0.0'
//    androidTestImplementation 'com.android.support.test:runner:1.0.2'
//    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
//    implementation 'com.jakewharton:butterknife:10.2.0'
//    annotationProcessor 'com.jakewharton:butterknife-compiler:10.2.0'
//    implementation project(':libusbcamera')
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    implementation "androidx.appcompat:appcompat:${androidXVersion}"

    implementation 'com.jakewharton:butterknife:10.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.2.0'

    implementation project(':libusbcamera')


}

def archives = [
        [
                'src' : 'https://paddleocr.bj.bcebos.com/dygraph_v2.0/lite/paddle_lite_libs_v2_9_0.tar.gz',
                'dest': 'PaddleLite'
        ],
        [
                'src' : 'https://paddlelite-demo.bj.bcebos.com/libs/android/opencv-4.2.0-android-sdk.tar.gz',
                'dest': 'OpenCV'
        ],
        [
                'src' : 'https://paddleocr.bj.bcebos.com/dygraph_v2.0/lite/ocr_v2_for_cpu.tar.gz',
                'dest' : 'src/main/assets/models'
        ],
        [
                'src' : 'https://paddleocr.bj.bcebos.com/dygraph_v2.0/lite/ch_dict.tar.gz',
                'dest' : 'src/main/assets/labels'
        ]
]

task downloadAndExtractArchives(type: DefaultTask) {
    doFirst {
        println "Downloading and extracting archives including libs and models"
    }
    doLast {
        // Prepare cache folder for archives
        String cachePath = "cache"
        if (!file("${cachePath}").exists()) {
            mkdir "${cachePath}"
        }
        archives.eachWithIndex { archive, index ->
            MessageDigest messageDigest = MessageDigest.getInstance('MD5')
            messageDigest.update(archive.src.bytes)
            String cacheName = new BigInteger(1, messageDigest.digest()).toString(32)
            // Download the target archive if not exists
            boolean copyFiles = !file("${archive.dest}").exists()
            if (!file("${cachePath}/${cacheName}.tar.gz").exists()) {
                ant.get(src: archive.src, dest: file("${cachePath}/${cacheName}.tar.gz"))
                copyFiles = true; // force to copy files from the latest archive files
            }
            // Extract the target archive if its dest path does not exists
            if (copyFiles) {
                copy {
                    from tarTree("${cachePath}/${cacheName}.tar.gz")
                    into "${archive.dest}"
                }
            }
        }
    }
}
preBuild.dependsOn downloadAndExtractArchives